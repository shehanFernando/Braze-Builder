import { Block, BlockTemplate } from '@/types';

/**
 * Returns default props for built-in block types
 */
function getDefaultPropsForType(type: string): Record<string, any> {
  const defaults: Record<string, Record<string, any>> = {
    text: {
      content: 'Enter your text here',
      fontSize: '16px',
      color: '#333333',
      fontFamily: 'Arial, sans-serif',
      textAlign: 'left',
      padding: '10px'
    },
    image: {
      src: 'https://via.placeholder.com/300x200',
      alt: 'Image',
      maxWidth: '100%',
      textAlign: 'center',
      padding: '10px',
      borderRadius: '0px'
    },
    button: {
      text: 'Click Here',
      href: '#',
      backgroundColor: '#007bff',
      color: '#ffffff',
      buttonPadding: '12px 24px',
      borderRadius: '4px',
      fontSize: '16px',
      fontFamily: 'Arial, sans-serif',
      textAlign: 'center',
      padding: '10px'
    },
    container: {
      backgroundColor: 'transparent',
      padding: '20px',
      margin: '0',
      borderRadius: '0px',
      border: 'none'
    },
    divider: {
      padding: '20px 0',
      height: '1px',
      color: '#cccccc',
      width: '100%'
    },
    spacer: {
      height: '20px'
    }
  };

  return defaults[type] || {};
}

/**
 * Renders a block tree to Liquid code using loaded templates
 */
export function renderBlockToLiquid(block: Block, templates: BlockTemplate[]): string {
  const template = templates.find(t => t.type === block.type);
  if (!template) {
    return `<!-- Unknown block type: ${block.type} -->`;
  }

  let liquidCode = template.template;

  // Replace prop placeholders with actual values
  Object.entries(block.props).forEach(([key, value]) => {
    const placeholder = new RegExp(`{{ ${key}(?: \\| default: '[^']*')? }}`, 'g');
    liquidCode = liquidCode.replace(placeholder, String(value));
  });

  // Handle children placeholder for container blocks
  if (block.children && block.children.length > 0) {
    const childrenLiquid = block.children
      .map(child => renderBlockToLiquid(child, templates))
      .join('\n');
    liquidCode = liquidCode.replace('{{ children }}', childrenLiquid);
  } else {
    liquidCode = liquidCode.replace('{{ children }}', '');
  }

  return liquidCode;
}

/**
 * Renders the complete email template structure to Liquid code
 */
export function renderEmailToLiquid(blocks: Block[], templates: BlockTemplate[]): string {
  const liquidCode = blocks
    .map(block => renderBlockToLiquid(block, templates))
    .join('\n');

  return `<!-- Generated by Braze Email Builder -->\n${liquidCode}`;
}