import { Block, BlockTemplate } from '@/types';

/**
 * Renders a single block to its Liquid equivalent.
 * @param block The block to render.
 * @param templates A list of available block templates.
 * @returns The rendered Liquid string for the block.
 */
export function renderBlockToLiquid(block: Block, templates: BlockTemplate[]): string {
  const template = templates.find(t => t.type === block.type);
  if (!template) {
    return `<!-- Unknown block type: ${block.type} -->`;
  }

  let liquid = template.template;

  // Add a comment with the block ID for traceability
  const blockComment = `<!-- Block ID: ${block.id} -->`;

  // Define all props as Liquid assigns
  const assigns = Object.entries(block.props)
    .map(([key, value]) => {
      const liquidValue = typeof value === 'string' ? `'${value.replace(/'/g, "\\'")}'` : value;
      return `{% assign ${key} = ${liquidValue} %}`;
    })
    .join('\n');

  return `${blockComment}\n${assigns}\n${liquid}`;
}

/**
 * Renders an array of blocks into a full Liquid email template.
 * @param blocks The array of blocks in order.
 * @param templates A list of available block templates.
 * @returns The complete Liquid email string.
 */
export function renderEmailToLiquid(blocks: Block[], templates: BlockTemplate[]): string {
  const header = '{% comment %} Generated by Braze Email Builder {% endcomment %}\n\n';
  const body = blocks.map(block => renderBlockToLiquid(block, templates)).join('\n\n');
  return header + body;
}